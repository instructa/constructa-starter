version: "3.9"

services:
  db:
    image: pgvector/pgvector:0.8.0-pg17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20

  minio:
    image: quay.io/minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:?}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:?}
    command: server /data --console-address ":9001"
    volumes:
      - minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20

  provision-minio:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing local/${MINIO_BUCKET} &&
      mc anonymous set none local/${MINIO_BUCKET} || true
      "
    restart: "no"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  meilisearch:
    image: getmeili/meilisearch:latest
    restart: unless-stopped
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:?changeme}
    volumes:
      - meili:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-sSf", "http://localhost:7700/health"]
      interval: 5s
      timeout: 3s
      retries: 40

  migrate:
    image: ${APP_IMAGE:?}:${APP_TAG:?}
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:?}
    entrypoint: ["sh", "-c", "pnpm run db:migrate"]
    restart: "no"

  worker:
    image: ${APP_IMAGE:?}:${APP_TAG:?}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      provision-minio:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:?}
      # S3-compatible config to reach MinIO inside the stack
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:?}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:?}
      S3_BUCKET: ${MINIO_BUCKET:?}
      # Job queue + schedules
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      BULLMQ_PREFIX: ${BULLMQ_PREFIX:-constructa}
      DAILY_CREDIT_REFILL_CRON: ${DAILY_CREDIT_REFILL_CRON:-0 3 * * *}
      JOB_DAILY_CREDIT_REFILL_URL: ${JOB_DAILY_CREDIT_REFILL_URL:-http://app:3000/api/jobs/daily-credit-refill}
      JOBS_SECRET: ${JOBS_SECRET:-}
      # Search
      MEILI_HOST: ${MEILI_HOST:-http://meilisearch:7700}
      MEILI_API_KEY: ${MEILI_API_KEY:-${MEILI_MASTER_KEY}}
      SEARCH_REINDEX_ON_BOOT: ${SEARCH_REINDEX_ON_BOOT:-false}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ["node", "--import", "tsx/loader", "src/worker/index.ts"]
    restart: unless-stopped

  app:
    image: ${APP_IMAGE:?}:${APP_TAG:?}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      provision-minio:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:?}
      # S3-compatible config to reach MinIO inside the stack
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:?}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:?}
      S3_BUCKET: ${MINIO_BUCKET:?}
      # Email provider
      EMAIL_PROVIDER: ${EMAIL_PROVIDER:-smtp}
      # Redis + Meili for app features
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      MEILI_HOST: ${MEILI_HOST:-http://meilisearch:7700}
      MEILI_API_KEY: ${MEILI_API_KEY:-${MEILI_MASTER_KEY}}

  caddy:
    image: caddy:2
    depends_on:
      app:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    environment:
      APP_HOSTNAME: ${APP_HOSTNAME:?app.example.com}
      ACME_EMAIL: ${ACME_EMAIL:?admin@example.com}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

volumes:
  pgdata:
  minio:
  redis:
  meili:
  caddy_data:
  caddy_config: