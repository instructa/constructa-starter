---
- name: Provision Constructa stack (Compose-only)
  hosts: constructa
  gather_facts: false

  pre_tasks:
    - name: Ensure python3 exists on host
      become: true
      raw: test -e /usr/bin/python3 || (apt-get update && apt-get install -y python3)
      changed_when: false

    - name: Fail if constructa_env variable is missing
      assert:
        that:
          - constructa_env is defined
          - constructa_env | dict2items | length > 0
        fail_msg: "Populate infra/ansible/group_vars/constructa/vars.yml (encrypt with Vault) before running the playbook."

    - name: Ensure compose directory exists
      become: true
      file:
        path: "{{ constructa_deploy_dir }}"
        state: directory
        owner: "{{ ansible_user | default('deploy') }}"
        group: "{{ ansible_user | default('deploy') }}"
        mode: "0755"

    # --- Optional swap management (kept from previous playbook) ---
    - name: Check for active swap
      become: true
      command: swapon --show=NAME --noheadings
      register: constructa_swap_status
      changed_when: false
      failed_when: false
      when: constructa_swap_file is defined

    - name: Determine swap activation state
      set_fact:
        constructa_swap_matches: "{{ constructa_swap_status.stdout_lines | default([]) | map('trim') | select('equalto', constructa_swap_file) | list | length }}"
      when: constructa_swap_file is defined

    - name: Create swapfile when needed
      become: true
      command: fallocate -l {{ constructa_swap_size }} {{ constructa_swap_file }}
      args:
        creates: "{{ constructa_swap_file }}"
      when:
        - constructa_swap_file is defined
        - constructa_swap_size is defined
        - (constructa_swap_matches | default(0) | int) == 0

    - name: Stat swapfile
      become: true
      stat:
        path: "{{ constructa_swap_file }}"
      register: constructa_swap_stat
      when: constructa_swap_file is defined

    - name: Ensure swapfile permissions
      become: true
      file:
        path: "{{ constructa_swap_file }}"
        owner: root
        group: root
        mode: '0600'
      when:
        - constructa_swap_file is defined
        - constructa_swap_stat.stat.exists | default(false)

    - name: Ensure swapfile owned by root when already active
      become: true
      file:
        path: "{{ constructa_swap_file }}"
        owner: root
        group: root
        mode: '0600'
      when:
        - constructa_swap_file is defined
        - constructa_swap_stat.stat.exists | default(false)
        - (constructa_swap_matches | default(0) | int) > 0

    - name: Initialize swapfile
      become: true
      command: mkswap {{ constructa_swap_file }}
      when:
        - constructa_swap_file is defined
        - constructa_swap_stat.stat.exists | default(false)
        - (constructa_swap_matches | default(0) | int) == 0

    - name: Ensure swapfile entry in fstab
      become: true
      lineinfile:
        path: /etc/fstab
        regexp: '^{{ constructa_swap_file | regex_escape() }}\\s'
        line: '{{ constructa_swap_file }} none swap sw 0 0'
        create: true
      when: constructa_swap_file is defined

    - name: Activate swapfile
      become: true
      command: swapon {{ constructa_swap_file }}
      register: constructa_swapon_cmd
      changed_when: (constructa_swap_matches | default(0) | int) == 0 and constructa_swapon_cmd.rc == 0
      failed_when: (constructa_swap_matches | default(0) | int) == 0 and constructa_swapon_cmd.rc != 0
      when:
        - constructa_swap_file is defined
        - constructa_swap_stat.stat.exists | default(false)
        - (constructa_swap_matches | default(0) | int) == 0

  tasks:
    - name: Sync compose bundle (excluding .env; rendered from Vault below)
      become: true
      become_user: root
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../deploy/"
        dest: "{{ constructa_deploy_dir }}/"
        delete: true
        rsync_opts:
          - "--exclude=.env"

    - name: Render compose env file from Vault values
      become: true
      template:
        src: templates/.env.j2
        dest: "{{ constructa_deploy_dir }}/.env"
        mode: "0600"
        owner: "{{ ansible_user | default('deploy') }}"
        group: "{{ ansible_user | default('deploy') }}"
      vars:
        env_map: "{{ constructa_env }}"
      tags: [env]

    - name: Docker login to registry (optional)
      become: true
      shell: 'echo "{{ constructa_registry_password }}" | docker login {{ constructa_registry_server | default("ghcr.io") }} -u "{{ constructa_registry_username }}" --password-stdin'
      no_log: true
      when: constructa_enable_registry_login | default(false) | bool

    - name: Ensure core compose services are running (db/minio/redis/meilisearch)
      become: true
      command:
        argv:
          - docker
          - compose
          - -f
          - compose.yml
          - up
          - -d
          - db
          - minio
          - redis
          - meilisearch
      args:
        chdir: "{{ constructa_deploy_dir }}"
      register: compose_core
      changed_when: >-
        'Creating' in compose_core.stdout or
        'Starting' in compose_core.stdout or
        'Recreating' in compose_core.stdout

    - name: Provision MinIO bucket
      become: true
      command:
        argv:
          - docker
          - compose
          - -f
          - compose.yml
          - run
          - --rm
          - provision-minio
      args:
        chdir: "{{ constructa_deploy_dir }}"
      register: provision_minio
      changed_when: false
      failed_when:
        - provision_minio.rc not in [0]

    - name: Run database migrations
      become: true
      command:
        argv:
          - docker
          - compose
          - -f
          - compose.yml
          - run
          - --rm
          - migrate
      args:
        chdir: "{{ constructa_deploy_dir }}"
      register: migrate_result
      changed_when: true

    - name: Ensure app, caddy and worker are running
      become: true
      command:
        argv:
          - docker
          - compose
          - -f
          - compose.yml
          - up
          - -d
          - app
          - caddy
          - worker
      args:
        chdir: "{{ constructa_deploy_dir }}"
      register: compose_up
      changed_when: >-
        'Creating' in compose_up.stdout or
        'Starting' in compose_up.stdout or
        'Recreating' in compose_up.stdout

    # --- Optional Docker GC (unchanged behavior) ---
    - name: Install docker-gc script (optional)
      become: true
      copy:
        dest: /usr/local/bin/docker-gc.sh
        mode: "0755"
        content: |
          #!/usr/bin/env bash
          set -euo pipefail
          AGE="${1:-{{ constructa_docker_gc_prune_age | default('720h') }}}"
          echo "[docker-gc] Pruning unused images/build-cache older than ${AGE}..."
          docker image prune -a -f --filter "until=${AGE}" || true
          docker builder prune -a -f --filter "unused-for=${AGE}" || true
      when: constructa_enable_docker_gc | default(false) | bool

    - name: Install docker-gc systemd service (optional)
      become: true
      copy:
        dest: /etc/systemd/system/docker-gc.service
        mode: "0644"
        content: |
          [Unit]
          Description=Docker image/build cache garbage collection

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/docker-gc.sh {{ constructa_docker_gc_prune_age | default('720h') }}
      when: constructa_enable_docker_gc | default(false) | bool

    - name: Install docker-gc systemd timer (optional)
      become: true
      copy:
        dest: /etc/systemd/system/docker-gc.timer
        mode: "0644"
        content: |
          [Unit]
          Description=Run Docker GC periodically

          [Timer]
          OnCalendar={{ constructa_docker_gc_schedule | default('weekly') }}
          Persistent=true
          AccuracySec=1h

          [Install]
          WantedBy=timers.target
      when: constructa_enable_docker_gc | default(false) | bool

    - name: Reload systemd and enable docker-gc timer (optional)
      become: true
      systemd:
        daemon_reload: true
        name: docker-gc.timer
        enabled: true
        state: started
      when: constructa_enable_docker_gc | default(false) | bool
