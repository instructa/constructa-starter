name: deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev or prod)"
        type: choice
        options: [dev, prod]
        required: true
        default: prod
      tag:
        description: "Image tag to deploy (default: current commit SHA)"
        required: false
        default: ""
      prune:
        description: "Prune old images after deploy"
        type: boolean
        required: false
        default: true

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Resolve tag and image
        id: meta
        run: |
          TAG="${{ inputs.tag }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_SHA}"; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=ghcr.io/${GITHUB_REPOSITORY}/app" >> "$GITHUB_OUTPUT"

      - name: Copy compose bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/deploy/*"
          target: ${{ secrets.APP_DIR }}

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE: ${{ steps.meta.outputs.image }}
          TAG: ${{ steps.meta.outputs.tag }}
          APP_DIR: ${{ secrets.APP_DIR }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PRUNE: ${{ inputs.prune }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE,TAG,APP_DIR,GHCR_USERNAME,GHCR_TOKEN,PRUNE
          script: |
            set -euo pipefail
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Ensure .env exists; if not, scaffold from sample
            if [ ! -f ".env" ] && [ -f ".env.sample" ]; then
              cp .env.sample .env
            fi

            # Write/replace APP_IMAGE + APP_TAG in .env
            if grep -q '^APP_IMAGE=' .env; then
              sed -i "s#^APP_IMAGE=.*#APP_IMAGE=${IMAGE}#" .env
            else
              echo "APP_IMAGE=${IMAGE}" >> .env
            fi
            if grep -q '^APP_TAG=' .env; then
              sed -i "s#^APP_TAG=.*#APP_TAG=${TAG}#" .env
            else
              echo "APP_TAG=${TAG}" >> .env
            fi

            # auth to GHCR to pull private images
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin

            # Pull + run
            docker compose pull app worker migrate
            docker compose up -d

            # Optional: prune old images
            if [ "$PRUNE" = "true" ]; then
              docker image prune -f || true
            fi